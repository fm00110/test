<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- 映射文件的配置 -->
<!-- 要实现mapper的动态代理就要保证mapper的命名空间和接口的权限顶名称相同，而且接口的方法名也要可mapper中的id名称相同 -->


<mapper namespace="com.ncu.dao.IStudentDao">    <!-- 命名空间要改成接口的权限顶名称 -->
	<insert id="insertStudent" parameterType="Student">
	insert into student(name,age,score) values(#{name},#{age},#{score})  <!-- #{}中的数据必须要跟传过来的数据一致 -->
	</insert>	
	
	<insert id="insertStudentCacheId" parameterType="Student">
	insert into student(name,age,score) values(#{name},#{age},#{score})
	<selectKey resultType="int" keyProperty="id">  <!-- 将查询到的id初始化为student的id -->  
	select @@identity   <!-- 查询刚插入到数据库中的student的id -->
	</selectKey>	
	</insert>
	
	<delete id="deleteStudentById">
	delete from student where id=#{abc}   <!-- 这里的#{}仅仅是一个占位符，里面放什么都行 -->
	</delete>
	
	
	<update id="updateStudent">
	update student set name=#{name}, age=#{age}, score=#{score} where id=#{id}
	</update>
	
	<select id="selectAllStudents" resultType="Student">
	select id,name,age,score from student
	</select>
	
	<select id="selectStudentById" resultType="Student">
	select id,name,age,score from student where id=#{adc}     <!-- 其中#{}中的数据可以随便写 -->
	</select>
	
	<select id="selectStudentByName" resultType="Student">
	select id,name,age,score from student where name=#{name} <!-- 其中#{}中的数据可以随便写 -->
	</select>
	
	<!-- <select id="selectStudentByName" resultType="Student">
	select id,name,age,score from student like '%' #{abc} '%' 
	 模糊查询，可以根据输入的字符串查询相关的数据，其中#{}的数据可以随便填写	
	</select> -->
	
<!-- 	/*进行插入 ，删除， 更新操作都要提交，查询不需要提交就可以
		 * 而且，增、删改操作会清空一级缓存，无论是否提交
		 * 一级缓存的生命周期和SQL session的生命周期是一致的
		 * 
		 * 开启内置的二级缓存步骤：
		 * 1)对实体进行序列化
		 * 2)在映射文件中添加<cathe/>标签
		   3)增、删、改同样也会清空二级缓存
		   4）对于二级缓存的清空，实质上是对所查找key对应的value置为null
		                   而非将<key, value>对，即entry删除
           5）从数据库中进行select查询的条件是:
           		1、缓存中根本就不存在这个key
           		2、缓存中存在这个key，但是它所对应的value为null
	 -->
	
</mapper>